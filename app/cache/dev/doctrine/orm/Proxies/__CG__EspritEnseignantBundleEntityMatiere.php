<?php

namespace Proxies\__CG__\Esprit\EnseignantBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Matiere extends \Esprit\EnseignantBundle\Entity\Matiere implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setLibelle($libelle)
    {
        $this->__load();
        return parent::setLibelle($libelle);
    }

    public function getLibelle()
    {
        $this->__load();
        return parent::getLibelle();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function setModule(\Esprit\EnseignantBundle\Entity\Module $module = NULL)
    {
        $this->__load();
        return parent::setModule($module);
    }

    public function getModule()
    {
        $this->__load();
        return parent::getModule();
    }

    public function addAbsence(\Esprit\EnseignantBundle\Entity\Absence $absences)
    {
        $this->__load();
        return parent::addAbsence($absences);
    }

    public function removeAbsence(\Esprit\EnseignantBundle\Entity\Absence $absences)
    {
        $this->__load();
        return parent::removeAbsence($absences);
    }

    public function getAbsences()
    {
        $this->__load();
        return parent::getAbsences();
    }

    public function addClasse(\Esprit\EnseignantBundle\Entity\Classe $classes)
    {
        $this->__load();
        return parent::addClasse($classes);
    }

    public function removeClasse(\Esprit\EnseignantBundle\Entity\Classe $classes)
    {
        $this->__load();
        return parent::removeClasse($classes);
    }

    public function getClasses()
    {
        $this->__load();
        return parent::getClasses();
    }

    public function addEnseignant(\Esprit\UserBundle\Entity\EspEnseignant $enseignants)
    {
        $this->__load();
        return parent::addEnseignant($enseignants);
    }

    public function removeEnseignant(\Esprit\UserBundle\Entity\EspEnseignant $enseignants)
    {
        $this->__load();
        return parent::removeEnseignant($enseignants);
    }

    public function getEnseignants()
    {
        $this->__load();
        return parent::getEnseignants();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'libelle', 'module', 'absences', 'classes', 'enseignants');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}